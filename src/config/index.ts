import { config } from 'dotenv';
import { LLMConfig, BrowserProfile, AgentSettings } from '../types';

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ
config();

/**
 * ÈÖçÁΩÆÁÆ°ÁêÜÂô® - Á≥ªÁªüÈÖçÁΩÆÁöÑ‰∏≠Â§ÆÁÆ°ÁêÜ‰∏≠ÂøÉ
 *
 * Ëøô‰∏™Á±ªË¥üË¥£ÁÆ°ÁêÜÊï¥‰∏™Á≥ªÁªüÁöÑÈÖçÁΩÆÔºåÂåÖÊã¨Ôºö
 * - AIÊ®°ÂûãÈÖçÁΩÆÔºàOpenAI„ÄÅGoogle„ÄÅAnthropicÔºâ
 * - ÊµèËßàÂô®ÈÖçÁΩÆÔºàÂêØÂä®ÂèÇÊï∞„ÄÅËßÜÁ™óÂ§ßÂ∞èÁ≠âÔºâ
 * - ‰ª£ÁêÜÈÖçÁΩÆÔºàË°å‰∏∫ÂèÇÊï∞„ÄÅÂäüËÉΩÂºÄÂÖ≥Á≠âÔºâ
 */
export class Config {

  /**
   * Ëé∑ÂèñAIÊ®°ÂûãÈÖçÁΩÆ
   * ‰ºöËá™Âä®Ê£ÄÊµãÂèØÁî®ÁöÑAPIÂØÜÈí•Âπ∂ÈÄâÊã©ÂØπÂ∫îÁöÑÊ®°Âûã
   */
  static getLLMConfig(): LLMConfig {
    const openaiKey = process.env.OPENAI_API_KEY;
    const anthropicKey = process.env.ANTHROPIC_API_KEY;
    const googleKey = process.env.GOOGLE_API_KEY;

    // ‰ºòÂÖà‰ΩøÁî®OpenAIÔºåÂõ†‰∏∫ÂÆÉÈÄöÂ∏∏ÊïàÊûúÊúÄÂ•Ω
    if (openaiKey) {
      return {
        provider: 'openai',
        model: process.env.OPENAI_MODEL || 'gpt-4o',  // ÈªòËÆ§‰ΩøÁî®ÊúÄÊñ∞ÁöÑGPT-4o
        apiKey: openaiKey,
        baseURL: process.env.OPENAI_BASE_URL || 'https://api.openai.com/v1',
        temperature: parseFloat(process.env.LLM_TEMPERATURE || '0'),  // 0Ë°®Á§∫Êõ¥Á°ÆÂÆöÊÄßÁöÑËæìÂá∫
        maxTokens: parseInt(process.env.LLM_MAX_TOKENS || '4000'),    // Ë∂≥Â§üÁöÑtokenÊï∞Èáè
      };
    } else if (anthropicKey) {
      return {
        provider: 'anthropic',
        model: process.env.ANTHROPIC_MODEL || 'claude-sonnet-4',  // ÊúÄÊñ∞ÁöÑClaudeÊ®°Âûã
        apiKey: anthropicKey,
        temperature: parseFloat(process.env.LLM_TEMPERATURE || '0'),
        maxTokens: parseInt(process.env.LLM_MAX_TOKENS || '4000'),
      };
    } else if (googleKey) {
      return {
        provider: 'google',
        model: process.env.GOOGLE_MODEL || 'gemini-2.5-flash',  // Âø´ÈÄüÂìçÂ∫îÁöÑGeminiÊ®°Âûã
        apiKey: googleKey,
        baseURL: process.env.GOOGLE_BASE_URL || 'https://generativelanguage.googleapis.com/v1beta/',
        temperature: parseFloat(process.env.LLM_TEMPERATURE || '0'),
        maxTokens: parseInt(process.env.LLM_MAX_TOKENS || '4000'),
      };
    }

    // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞‰ªª‰ΩïAPIÂØÜÈí•ÔºåÊäõÂá∫ÂèãÂ•ΩÁöÑÈîôËØØ‰ø°ÊÅØ
    throw new Error(
      'Êú™ÊâæÂà∞AIÊ®°ÂûãAPIÂØÜÈí•„ÄÇËØ∑Âú®.envÊñá‰ª∂‰∏≠ËÆæÁΩÆ OPENAI_API_KEY„ÄÅANTHROPIC_API_KEY Êàñ GOOGLE_API_KEY'
    );
  }

  // Browser Configuration
  static getBrowserProfile(): BrowserProfile {
    const executablePath = process.env.BROWSER_EXECUTABLE_PATH;

    // Validate custom browser path if provided
    if (executablePath) {
      const fs = require('fs');
      if (!fs.existsSync(executablePath)) {
        console.warn(`Warning: Custom browser path not found: ${executablePath}`);
        console.warn('Falling back to default Playwright browser...');
      }
    }

    return {
      headless: process.env.BROWSER_HEADLESS === 'true',
      viewport: {
        width: parseInt(process.env.BROWSER_VIEWPORT_WIDTH || process.env.BROWSER_WIDTH || '1920'),
        height: parseInt(process.env.BROWSER_VIEWPORT_HEIGHT || process.env.BROWSER_HEIGHT || '1080'),
      },
      userDataDir: process.env.BROWSER_USER_DATA_DIR,
      executablePath: executablePath && require('fs').existsSync(executablePath) ? executablePath : undefined,
      timeout: parseInt(process.env.BROWSER_TIMEOUT || '30000'),
      autoInstall: process.env.BROWSER_AUTO_INSTALL !== 'false',
      // Êñ∞Â¢ûÈÖçÁΩÆÈÄâÈ°π
      slowMo: parseInt(process.env.BROWSER_SLOW_MO || '0'),
      devtools: process.env.BROWSER_DEVTOOLS === 'true',
      args: process.env.BROWSER_ARGS?.split(',').map(arg => arg.trim()),
      userAgent: process.env.BROWSER_USER_AGENT,
      ignoreHTTPSErrors: process.env.BROWSER_IGNORE_HTTPS_ERRORS === 'true',
      locale: process.env.BROWSER_LOCALE,
      timezone: process.env.BROWSER_TIMEZONE,
      proxy: process.env.BROWSER_PROXY_SERVER ? {
        server: process.env.BROWSER_PROXY_SERVER,
        username: process.env.BROWSER_PROXY_USERNAME,
        password: process.env.BROWSER_PROXY_PASSWORD,
      } : undefined,
      geolocation: process.env.BROWSER_GEOLOCATION ? JSON.parse(process.env.BROWSER_GEOLOCATION) : undefined,
      permissions: process.env.BROWSER_PERMISSIONS?.split(',').map(p => p.trim()),
      extraHTTPHeaders: process.env.BROWSER_EXTRA_HEADERS ? JSON.parse(process.env.BROWSER_EXTRA_HEADERS) : undefined,
      colorScheme: process.env.BROWSER_COLOR_SCHEME as 'light' | 'dark' | 'no-preference' | undefined,
      reducedMotion: process.env.BROWSER_REDUCED_MOTION as 'reduce' | 'no-preference' | undefined,
      forcedColors: process.env.BROWSER_FORCED_COLORS as 'active' | 'none' | undefined,
      // ‰∏ãËΩΩÈÖçÁΩÆ
      acceptDownloads: process.env.BROWSER_ACCEPT_DOWNLOADS !== 'false',
      downloadsPath: process.env.BROWSER_DOWNLOADS_PATH || this.getDefaultDownloadsPath(),
    };
  }

  /**
   * üîß Ëé∑ÂèñÈªòËÆ§‰∏ãËΩΩË∑ØÂæÑ
   */
  static getDefaultDownloadsPath(): string {
    const path = require('path');
    // ‰ΩøÁî®È°πÁõÆÊ†πÁõÆÂΩï‰∏ãÁöÑdownloadsÊñá‰ª∂Â§π
    return path.join(process.cwd(), 'downloads');
  }

  /**
   * üîß Ëé∑ÂèñÊµèËßàÂô®ËøûÊé•ÈÖçÁΩÆ
   */
  static getBrowserConnectionConfig() {
    return {
      connectToUserBrowser: process.env.BROWSER_CONNECT_TO_USER_BROWSER === 'true',
      connectionMode: process.env.BROWSER_CONNECTION_MODE || 'smart',
      debugPort: parseInt(process.env.BROWSER_DEBUG_PORT || '9222'),
      debugHost: process.env.BROWSER_DEBUG_HOST || 'localhost',
      stealthMode: process.env.BROWSER_STEALTH_MODE === 'true',
      autoClose: process.env.BROWSER_AUTO_CLOSE !== 'false',
      maximized: process.env.BROWSER_MAXIMIZED === 'true',
      fullscreen: process.env.BROWSER_FULLSCREEN === 'true',
      enableGpu: process.env.BROWSER_ENABLE_GPU !== 'false',
      customArgs: process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(',').map(arg => arg.trim()) : [],
      kioskMode: process.env.BROWSER_KIOSK_MODE === 'true',
      windowPosition: {
        x: parseInt(process.env.BROWSER_WINDOW_X || '0'),
        y: parseInt(process.env.BROWSER_WINDOW_Y || '0'),
      },
      windowSize: {
        width: parseInt(process.env.BROWSER_WINDOW_WIDTH || '1920'),
        height: parseInt(process.env.BROWSER_WINDOW_HEIGHT || '1080'),
      },
      deviceScaleFactor: parseFloat(process.env.BROWSER_DEVICE_SCALE_FACTOR || '1'),
      pageLoadTimeout: parseInt(process.env.BROWSER_PAGE_LOAD_TIMEOUT || '30000'),
      navigationTimeout: parseInt(process.env.BROWSER_NAVIGATION_TIMEOUT || '30000'),
    };
  }

  // Agent Configuration
  static getAgentSettings(): AgentSettings {
    return {
      maxSteps: parseInt(process.env.AGENT_MAX_STEPS || '50'),
      maxActionsPerStep: parseInt(process.env.AGENT_MAX_ACTIONS_PER_STEP || '3'),
      useVision: process.env.AGENT_USE_VISION !== 'false',
      temperature: parseFloat(process.env.LLM_TEMPERATURE || '0'),
      enablePlugins: process.env.ENABLE_PLUGINS !== 'false', // ÈªòËÆ§ÂêØÁî®Êèí‰ª∂Á≥ªÁªü
    };
  }

  // Logging Configuration
  static getLogLevel(): string {
    return process.env.LOG_LEVEL || 'info';
  }

  // Debug mode
  static isDebugMode(): boolean {
    return process.env.DEBUG === 'true';
  }
}

export default Config;
